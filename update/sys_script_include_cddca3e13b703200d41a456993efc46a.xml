<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_service_request.ServiceRequestManagement</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>ServiceRequestManagement</name>
        <script><![CDATA[var ServiceRequestManagement = Class.create();
ServiceRequestManagement.prototype = {
	initialize: function() {
	},

	find: function(serviceRequest) {
		// todo: implement
	},

	assignAvailableWork: function(workerRequest) {
		var serviceRequest = matchAvailableServiceRequest(workerRequest.capabilities);
		if (gs.nil(serviceRequest)) {
			return;
		}

		var assignment = assignWork(serviceRequest, workerRequest.workerId);
		if (!gs.nil(assignment)) {
			return assignment;
		}
	},

	scheduleService: function(serviceRequest) {

		var scheduledTime = deriveScheduledTime(serviceRequest);
		var priority = derivePriority(serviceRequest);

		// todo: check for duplicate token -- if found then error!

		var state = 'created';

		var gr = new GlideRecord('sn_service_request_service_request');
		gr.initialize();
		gr.token = serviceRequest.token;
		gr.state = state;
		gr.instance_name = serviceRequest.instance_name;
		gr.instance_id = serviceRequest.instance_id;
		gr.instance_url = serviceRequest.instance_url;
		gr.node_id = serviceRequest.node_id;
		gr.node_url = serviceRequest.node_url;
		gr.capability_type = serviceRequest.capability.type;
		gr.capability_name = serviceRequest.capability.name;
		gr.capability_version = serviceRequest.capability.version;
		gr.scheduled_time = scheduledTime;
		gr.priority = priority;
		gr.requested_by = gs.getUserName();
		var sys_id = gr.insert();

		trackServiceRequestState(sys_id, state);

		var schedule = {};
		schedule.sys_id = sys_id;
		schedule.scheduledTime = scheduledTime.getDisplayValue();
		schedule.priority = priority;
		schedule.state = state;
		return schedule;
	},

	checkServiceRequest: function(serviceRequest) {
		if (gs.nil(serviceRequest) || gs.nil(serviceRequest.token) ||
			gs.nil(serviceRequest.instance_name) || gs.nil(serviceRequest.instance_url) ||
			gs.nil(serviceRequest.instance_id) || gs.nil(serviceRequest.node_id) ||
			gs.nil(serviceRequest.node_url)
		) {
			return "serviceRequest parameter is malformed. It requires the following fields: token, instance_name, instance_url, instance_id, node_id, node_url, capability";
		}

		return checkCapability(serviceRequest.capability);
	},

	checkWorkerRequest: function(workerRequest) {
		if (gs.nil(workerRequest) || gs.nil(workerRequest.workerId) || gs.nil(workerRequest.capabilities) ||
			gs.nil(workerRequest.capabilities.length) || 0 == workerRequest.capabilities.length
		) {
			return "workerRequest is malformed. It requires the following fields: id, capabilities";
		}

		for (i = 0; i < workerRequest.capabilities.length; i++) {
			var error = checkCapability(workerRequest.capabilities[i]);
			if (!gs.nil(error)) {
				return error;
			}
		}
	},

	cancel: function(serviceRequest) {

	},

	type: 'ServiceRequestManagement'
};

function checkCapability(capability) {
	if (gs.nil(capability) || gs.nil(capability.type) || gs.nil(capability.name) || gs.nil(capability.version)) {
		return "capability is incomplete. It requires the following fields: type, name, version";
	}
}

function deriveScheduledTime(jobRequest) {
	// todo: in the future we may have more logic tied to this...
	return new GlideDateTime();
}

function derivePriority(jobRequest) {
	// todo: in the future we may have more logic tied to this...
	return 100;
}

function matchAvailableServiceRequest(workerCapabilities) {
	var capabilityTypes = [];
	var capabilityNames = [];
	for (i = 0; i < workerCapabilities.length; i++) {
		capabilityTypes[i] = workerCapabilities[i].type;
		capabilityNames[i] = workerCapabilities[i].name;
	}

	var sr = new GlideRecord("sn_service_request_service_request");
	sr.addQuery("state", "created");
	sr.addQuery("capability_type", "IN", capabilityTypes.join());
	sr.addQuery("capability_name", "IN", capabilityNames.join());
	// todo: scheduled_time <= now
	sr.orderBy("scheduled_time"); 
	sr.query();
	var match;
	if (sr.next()) {
		// match to the first eligible service request
		for (i = 0; i < workerCapabilities.length; i++) {
			if (workerCapabilities[i].name == sr.getValue("capability_name") &&
				workerCapabilities[i].type == sr.getValue("capability_type") &&
				workerCapabilities[i].version == sr.getValue("capability_version")) {
				match = sr;
				break;
			}
		}
	}

	return match;
}

function assignWork(serviceRequestGlideRecord, workerId) {
	var assignedState = "assigned";
	serviceRequestGlideRecord.setValue("state", assignedState);
	serviceRequestGlideRecord.setValue("assigned_worker_id", workerId);
	serviceRequestGlideRecord.update(); // todo: check for null return value...this detects race condition and means no work assigned
	
	trackServiceRequestState(serviceRequestGlideRecord.getUniqueValue(), assignedState);

	var assignment = {};
	assignment.coordinates = {};
	assignment.capability = {};
	
	assignment.coordinates.token = serviceRequestGlideRecord.getValue("token");
	assignment.coordinates.instance_id = serviceRequestGlideRecord.getValue("instance_id");
	assignment.coordinates.instance_name = serviceRequestGlideRecord.getValue("instance_name");
	assignment.coordinates.instance_url = serviceRequestGlideRecord.getValue("instance_url");
	assignment.coordinates.node_id = serviceRequestGlideRecord.getValue("node_id");
	assignment.coordinates.node_url = serviceRequestGlideRecord.getValue("node_url");
	
	assignment.capability.type = serviceRequestGlideRecord.getValue("capability_type");
	assignment.capability.name = serviceRequestGlideRecord.getValue("capability_name");
	assignment.capability.version = serviceRequestGlideRecord.getValue("capability_version");
	
	return assignment;
}

function trackServiceRequestState(serviceRequestSysId, state) {
	var gr = new GlideRecord('sn_service_request_service_request_status');
	gr.initialize();
	gr.service_request = serviceRequestSysId;
	gr.state = state;
	gr.insert();

	// todo: need to figure out a cascade-delete strategy
}
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-02-07 21:59:03</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>cddca3e13b703200d41a456993efc46a</sys_id>
        <sys_mod_count>29</sys_mod_count>
        <sys_name>ServiceRequestManagement</sys_name>
        <sys_package display_value="Service Request Management" source="sn_service_request">c8a02be10b303200d109061437673a7b</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Service Request Management">c8a02be10b303200d109061437673a7b</sys_scope>
        <sys_update_name>sys_script_include_cddca3e13b703200d41a456993efc46a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-02-08 20:29:02</sys_updated_on>
    </sys_script_include>
</record_update>
